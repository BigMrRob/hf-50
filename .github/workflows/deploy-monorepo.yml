name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NEXT_TELEMETRY_DISABLED: 1
  NODE_VERSION: 18
  # Use this env var to detect if running locally with act
  ACT: ${{ github.actor == 'nektos/act' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      # Build only the API, not the web app
      - name: Build API
        run: cd apps/api && pnpm build

      # Set up Docker Buildx only if not running locally with act
      - name: Set up Docker Buildx
        if: ${{ env.ACT != 'true' }}
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      # Set up QEMU only if not running locally with act
      - name: Set up QEMU
        if: ${{ env.ACT != 'true' }}
        uses: docker/setup-qemu-action@v3

      # Login to Docker Hub only if not running locally with act
      - name: Login to Docker Hub
        if: ${{ env.ACT != 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Create a simpler Dockerfile for Web - we'll skip the build step in CI
      - name: Prepare Web Dockerfile
        run: |
          cat > ./apps/web/Dockerfile << 'EOF'
          # Base stage for the project
          FROM node:18-alpine AS base

          # Install curl for healthchecks and other dependencies
          RUN apk add --no-cache curl

          # Production stage
          FROM base AS runner
          WORKDIR /app

          # Set production environment variables
          ENV NODE_ENV=production
          ENV NEXT_TELEMETRY_DISABLED=1

          # Copy package.json files needed for install
          COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
          COPY apps/web/package.json ./apps/web/
          COPY packages/ ./packages/

          # Install only production dependencies
          RUN npm install -g pnpm@9.0.0
          RUN pnpm install --prod --frozen-lockfile --filter ./apps/web...

          # Copy the rest of the application code
          COPY apps/web/ ./apps/web/

          # Expose the port Next.js runs on
          EXPOSE 3000

          # Set working directory to the web app
          WORKDIR /app/apps/web

          # Start the Next.js development server instead of using built files
          CMD ["pnpm", "dev"]
          EOF

      # Build and push Web app only if not running locally with act
      - name: Build and push Web app
        if: ${{ env.ACT != 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hf50-web:latest
          cache-from: |
            type=gha,scope=web-prod
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hf50-web:buildcache
          cache-to: |
            type=gha,scope=web-prod,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hf50-web:buildcache,mode=max

      # Only build locally (no push) when using act
      - name: Local build Web Docker image (for act)
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running local build without push because we're using act..."
          docker build -t hf50-web:local -f ./apps/web/Dockerfile .

      # Create a dummy test Dockerfile for API since we already built it
      - name: Verify API directory contents
        run: |
          echo "Verifying API directory contents before building Docker image:"
          ls -la ./apps/api/

      # Create Dockerfile for API with ultra-simple approach
      - name: Create API Dockerfile
        run: |
          cat > ./apps/api/Dockerfile << 'EOF'
          FROM node:18-alpine

          WORKDIR /app

          # Install dependencies
          RUN apk add --no-cache curl

          # Copy everything from current directory
          COPY . .

          # Expose port
          EXPOSE 3000

          # Start app
          CMD ["node", "dist/main"]
          EOF

      # Only build locally (no push) when using act
      - name: Local build API Docker image (for act)
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running local build without push because we're using act..."
          docker build -t hf50-api:local -f ./apps/api/Dockerfile ./apps/api

      # Build and push API app only if not running locally with act
      - name: Build and push API app
        if: ${{ env.ACT != 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hf50-api:latest
          cache-from: |
            type=gha,scope=api-prod
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hf50-api:buildcache
          cache-to: |
            type=gha,scope=api-prod,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hf50-api:buildcache,mode=max
          build-args: |
            NODE_ENV=production

      # Notify Coolify of new image (only if not running with act)
      - name: Notify deployment completion
        if: ${{ env.ACT != 'true' }}
        run: |
          echo "Docker images have been built and pushed to Docker Hub"
          echo "Web image: ${{ secrets.DOCKERHUB_USERNAME }}/hf50-web:latest"
          echo "API image: ${{ secrets.DOCKERHUB_USERNAME }}/hf50-api:latest"
          echo "Coolify will automatically detect the new images and deploy them"

      # Show success message for local testing with act
      - name: Local testing success
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "ðŸŽ‰ Local testing with act completed successfully!"
          echo "Docker images have been built locally but not pushed"
          echo "Local Web image: hf50-web:local"
          echo "Local API image: hf50-api:local"
